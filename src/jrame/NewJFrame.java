/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jrame;


import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.io.FileReader;
import javax.swing.JFileChooser;
import java.io.*;
import java.util.Date;
import java.awt.datatransfer.Clipboard;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;







//import com.inet.Jortho.FileUserDictionary;

/**
 *
 * @author USER
 */
public class NewJFrame extends javax.swing.JFrame{
Clipboard clipboard = getToolkit().getSystemClipboard();



    private String fileAsString;
    
   
  class myHighlighter extends DefaultHighlighter.DefaultHighlightPainter{
      
        public myHighlighter(Color color) {
            super(color);
        }
      
  }
JTextComponent textcomp;
DefaultHighlighter.HighlightPainter highlighter = new myHighlighter(Color.RED);
public void removeHighlighter(JTextComponent textcomp)
{
    Highlighter removehighlighter =textcomp.getHighlighter();
    Highlighter.Highlight[] remove;
    remove = removehighlighter.getHighlights();
    for(int i=0; i<remove.length; i++)
    {
        if(remove[i].getPainter() instanceof myHighlighter)
        {
           removehighlighter.removeHighlight(remove[i]);
        }
    }
    
}
public void searchTextArea(JTextComponent textcomp,String textString)
{
    removeHighlighter(textcomp);
    try{
       Highlighter hilight = textcomp.getHighlighter();
       Document doc = textcomp.getDocument();
       String text = doc.getText(0, doc.getLength());
       int pos=0;
       while((pos=text.toLowerCase().indexOf(textString.toLowerCase(),pos))>=0)
       {
          hilight.addHighlight(pos, pos+textString.length(), highlighter);
          pos+=textString.length();
       }
    }catch(Exception e)
    {
        System.out.println(e);
    }
} 
    
    
    
    
    

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        seticon();
      
    }

    NewJFrame(String fileAsString) {
        
       this.fileAsString = ta.getText();
    }
   

    public String getArea()
    {
        return ta.getText();
    }
    public void setArea(String text)
    {
        text=ta.getText();
    }
    
    
    File titlename;
     String title;
     int flag=0;
     String savefile;
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textarea = new javax.swing.JScrollPane();
        ta = new javax.swing.JTextArea();
        menubar = new javax.swing.JMenuBar();
        filemenu = new javax.swing.JMenu();
        newmenu = new javax.swing.JMenuItem();
        openmenu = new javax.swing.JMenuItem();
        savemenu = new javax.swing.JMenuItem();
        saveAsmenu = new javax.swing.JMenuItem();
        exitmenu = new javax.swing.JMenuItem();
        editmenu = new javax.swing.JMenu();
        copymenu = new javax.swing.JMenuItem();
        cutmenu = new javax.swing.JMenuItem();
        pastemenu = new javax.swing.JMenuItem();
        deletemenu = new javax.swing.JMenuItem();
        find = new javax.swing.JMenuItem();
        reolace = new javax.swing.JMenuItem();
        selectAllmenu = new javax.swing.JMenuItem();
        timeMenu = new javax.swing.JMenuItem();
        formatmenu = new javax.swing.JMenu();
        fontmenu = new javax.swing.JMenuItem();
        helpmenu = new javax.swing.JMenu();
        notepad = new javax.swing.JMenuItem();
        spellbtn = new javax.swing.JMenu();
        spellchecker = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Untitled-Notepad");
        setLocation(new java.awt.Point(200, 75));

        ta.setColumns(20);
        ta.setFont(new java.awt.Font("Courier New", 0, 18)); // NOI18N
        ta.setRows(5);
        textarea.setViewportView(ta);

        menubar.setBorder(null);

        filemenu.setText("File");
        filemenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        newmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newmenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        newmenu.setText("New");
        newmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newmenuActionPerformed(evt);
            }
        });
        filemenu.add(newmenu);

        openmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openmenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        openmenu.setText("Open");
        openmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openmenuActionPerformed(evt);
            }
        });
        filemenu.add(openmenu);

        savemenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        savemenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        savemenu.setText("Save");
        savemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savemenuActionPerformed(evt);
            }
        });
        filemenu.add(savemenu);

        saveAsmenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        saveAsmenu.setText("Save as");
        saveAsmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsmenuActionPerformed(evt);
            }
        });
        filemenu.add(saveAsmenu);

        exitmenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        exitmenu.setText("Exit");
        exitmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitmenuActionPerformed(evt);
            }
        });
        filemenu.add(exitmenu);

        menubar.add(filemenu);

        editmenu.setText("Edit");
        editmenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        copymenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copymenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        copymenu.setText("Copy");
        copymenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copymenuActionPerformed(evt);
            }
        });
        editmenu.add(copymenu);

        cutmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutmenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cutmenu.setText("Cut");
        cutmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutmenuActionPerformed(evt);
            }
        });
        editmenu.add(cutmenu);

        pastemenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pastemenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        pastemenu.setText("Paste");
        pastemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pastemenuActionPerformed(evt);
            }
        });
        editmenu.add(pastemenu);

        deletemenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        deletemenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        deletemenu.setText("Delete");
        deletemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletemenuActionPerformed(evt);
            }
        });
        editmenu.add(deletemenu);

        find.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        find.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        find.setText("Find");
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });
        editmenu.add(find);

        reolace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        reolace.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        reolace.setText("Replace ...");
        reolace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reolaceActionPerformed(evt);
            }
        });
        editmenu.add(reolace);

        selectAllmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        selectAllmenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        selectAllmenu.setText("Select All");
        selectAllmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllmenuActionPerformed(evt);
            }
        });
        editmenu.add(selectAllmenu);

        timeMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        timeMenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        timeMenu.setText("Time/Date");
        timeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeMenuActionPerformed(evt);
            }
        });
        editmenu.add(timeMenu);

        menubar.add(editmenu);

        formatmenu.setText("Format");
        formatmenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        fontmenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        fontmenu.setText("Font");
        fontmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontmenuActionPerformed(evt);
            }
        });
        formatmenu.add(fontmenu);

        menubar.add(formatmenu);

        helpmenu.setText("Help");
        helpmenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        notepad.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        notepad.setText("About Notepad");
        notepad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notepadActionPerformed(evt);
            }
        });
        helpmenu.add(notepad);

        menubar.add(helpmenu);

        spellbtn.setText("SpellChecker");
        spellbtn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        spellchecker.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        spellchecker.setText("spellchecker");
        spellchecker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spellcheckerActionPerformed(evt);
            }
        });
        spellbtn.add(spellchecker);

        menubar.add(spellbtn);

        setJMenuBar(menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textarea, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textarea, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newmenuActionPerformed
       
        String text=ta.getText();
        ta.setText("");
        flag=0;
        setTitle("Untitled-Notepad");
        System.out.println(text);
        
    }//GEN-LAST:event_newmenuActionPerformed

    private void openmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openmenuActionPerformed
        JFileChooser f = new JFileChooser();
        StringBuffer s1= new StringBuffer();
        String path="";
         String endofFile;
        flag=1;
         
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("notepad.png")));
        f.setDialogTitle("Open");
        
        int open=f.showOpenDialog(this);
        if(open==JFileChooser.APPROVE_OPTION)
        {
            File file = f.getSelectedFile();
             path = file.getPath();
             savefile=path;
        }
        try
        {
            titlename=new File(path);
            title=titlename.getName();
            setTitle(title+"-Notepad");
            
            FileReader fr= new FileReader(path);
            BufferedReader bf= new BufferedReader(fr);
            while((endofFile=bf.readLine())!=null)
            {
                s1.append(endofFile+"\n");
                
            }
            System.out.println(path);
            ta.setText(s1.toString());
          
            bf.close();
            fr.close();
        }
        catch(IOException e)
        {
            System.out.println("Exception");
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_openmenuActionPerformed

    private void savemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savemenuActionPerformed
        JFileChooser jf= new JFileChooser();
        String jpath="";
        File file;
        String name="";
        int i=0;
        String newfile;
        if(flag==0){
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("notepad.png")));
        jf.setDialogTitle("Specified the file to Save");
        i=jf.showSaveDialog(this);
        if( i==JFileChooser.APPROVE_OPTION){
         file=jf.getSelectedFile();
         jpath= file.getPath();
         name=file.getName();
        }
        setTitle(name+"-Notepad");
        try{
        //File createfile=new File(jpath);
        //if(createfile.exists()==false)
        //createfile.createNewFile();
        FileWriter fw=new FileWriter(jpath);
        String save="";
        save=ta.getText();
        fw.write(save);
        fw.close();
        }
        catch(IOException e){
        }
        }
      else
        {
            File pfile=new File(savefile);
            String p= pfile.getName();
            System.out.println(p);
            String ptext=ta.getText();
            try{
            FileWriter fe= new FileWriter(savefile);
            fe.write(ptext);
            flag=0;
            fe.close();
            }
            catch(IOException ev)
            {
                
            }
        }
    
        
       
    }//GEN-LAST:event_savemenuActionPerformed

    private void saveAsmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsmenuActionPerformed
       JFileChooser jf = new JFileChooser();
        String jpath="";
        File file;
        String name="";
        int i=0;
         setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("notepad.png")));
        jf.setDialogTitle("Save as");
        i=jf.showSaveDialog(this);
        if( i==JFileChooser.APPROVE_OPTION){
         file=jf.getSelectedFile();
         jpath= file.getPath();
         name=file.getName();
        }
        setTitle(name+"-Notepad");
        try{
        //File createfile=new File(jpath);
        //if(createfile.exists()==false)
        //createfile.createNewFile();
        FileWriter fw=new FileWriter(jpath);
        String save="";
        save=ta.getText();
        fw.write(save);
        fw.close();
        }
        catch(IOException e){
            e.printStackTrace();
        }
       
    }//GEN-LAST:event_saveAsmenuActionPerformed

    private void exitmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitmenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitmenuActionPerformed
  

    private void spellcheckerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spellcheckerActionPerformed
       
       int count=0;
        int flag=0;
        String text=ta.getText();
       String[] words=text.split("\\s");
       for(String w:words)
       {
           System.out.println(w);
           String word2=w;
            try{
         FileReader fr= new FileReader("dictionary.txt");
         BufferedReader bf= new BufferedReader(fr);
         String endofFile;
         while((endofFile=bf.readLine())!=null){
             //System.out.println(endofFile);
             if(word2.equalsIgnoreCase(endofFile))
             {
                flag=1;
                break;
             }
             else
             {
                 flag=0;
                  
             }
             
                 
             
         }
         if(flag==0)
         {
            searchTextArea(ta,word2);
             count++;
         }
         
       flag=0;  
             
  }
            catch(Exception e)
            {
                System.out.println(e);
            }
            
    }//GEN-LAST:event_spellcheckerActionPerformed
    if(count>0){
        JOptionPane.showMessageDialog(this,"Highlighted area may have misspelled words");
        
        removeHighlighter(this.ta);
        
    
    }
       
       
    }
    private void fontmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontmenuActionPerformed
        // TODO add your handling code here:
        FontDialog fd= new FontDialog(this,true);
        fd.setVisible(true);
    }//GEN-LAST:event_fontmenuActionPerformed

    private void timeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeMenuActionPerformed
        ta.insert(new Date().toString(),ta.getSelectionStart());
    }//GEN-LAST:event_timeMenuActionPerformed

    private void selectAllmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllmenuActionPerformed
        String selectText = ta.getSelectedText();
        StringSelection selectSelection = new StringSelection(selectText);
        ta.selectAll();

    }//GEN-LAST:event_selectAllmenuActionPerformed

    private void reolaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reolaceActionPerformed
       // replaceForm replace = new replaceForm();
        //replace.setVisible(true);
        replaceDialog r = new replaceDialog(this,true);
        r.setVisible(true);
    }//GEN-LAST:event_reolaceActionPerformed

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
        /*FileWriter fw=null;
        try{
            fw = new FileWriter("output.txt");
            String text = ta.getSelectedText();
            fw.write(text);
            fw.close();
        }catch(Exception e){
            System.out.println(e);
        }*/

        findDialog f = new findDialog(this,true);
        f.setVisible(true);
    }//GEN-LAST:event_findActionPerformed

    private void deletemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletemenuActionPerformed
        String deleteText = ta.getSelectedText();
        StringSelection deleteSelection = new StringSelection(deleteText);
        ta.replaceRange("", ta.getSelectionStart(),ta.getSelectionEnd());
    }//GEN-LAST:event_deletemenuActionPerformed

    private void pastemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pastemenuActionPerformed
        try{
            Transferable pasteText = clipboard.getContents(textEditorGui.class);
            String sel = (String) pasteText.getTransferData(DataFlavor.stringFlavor);
            ta.replaceRange(sel,ta.getSelectionStart(), ta.getSelectionEnd());
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_pastemenuActionPerformed

    private void cutmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutmenuActionPerformed
        String cutText = ta.getSelectedText();
        StringSelection cutSelection = new StringSelection(cutText);
        clipboard.setContents(cutSelection, cutSelection);
        ta.replaceRange(" ", ta.getSelectionStart(), ta.getSelectionEnd());
    }//GEN-LAST:event_cutmenuActionPerformed

    private void copymenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copymenuActionPerformed
        String copyText = ta.getSelectedText();
        StringSelection copySelection = new StringSelection(copyText);
        clipboard.setContents(copySelection, copySelection);
    }//GEN-LAST:event_copymenuActionPerformed

    private void notepadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notepadActionPerformed
        
    }//GEN-LAST:event_notepadActionPerformed
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    

    private void seticon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("notepad.png")));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem copymenu;
    private javax.swing.JMenuItem cutmenu;
    private javax.swing.JMenuItem deletemenu;
    private javax.swing.JMenu editmenu;
    private javax.swing.JMenuItem exitmenu;
    private javax.swing.JMenu filemenu;
    private javax.swing.JMenuItem find;
    private javax.swing.JMenuItem fontmenu;
    private javax.swing.JMenu formatmenu;
    private javax.swing.JMenu helpmenu;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JMenuItem newmenu;
    private javax.swing.JMenuItem notepad;
    private javax.swing.JMenuItem openmenu;
    private javax.swing.JMenuItem pastemenu;
    private javax.swing.JMenuItem reolace;
    private javax.swing.JMenuItem saveAsmenu;
    private javax.swing.JMenuItem savemenu;
    private javax.swing.JMenuItem selectAllmenu;
    private javax.swing.JMenu spellbtn;
    private javax.swing.JMenuItem spellchecker;
    public javax.swing.JTextArea ta;
    private javax.swing.JScrollPane textarea;
    private javax.swing.JMenuItem timeMenu;
    // End of variables declaration//GEN-END:variables
   
}
